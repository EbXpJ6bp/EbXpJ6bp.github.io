<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EbXpJ6bp&#39;s Blog</title>
    <link>http://ebxpj6bp.github.io/</link>
    <description>Recent content on EbXpJ6bp&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 03 Nov 2015 16:03:34 +0900</lastBuildDate>
    <atom:link href="http://ebxpj6bp.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>C言語による並列処理の勉強をしたかった。</title>
      <link>http://ebxpj6bp.github.io/post/2015-11-03/</link>
      <pubDate>Tue, 03 Nov 2015 16:03:34 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-11-03/</guid>
      <description>

&lt;p&gt;C言語による並列処理の勉強をしたかった。備忘録&lt;/p&gt;

&lt;h2 id=&#34;openmpとは:a0a57c1b6e12579fe764acb009917377&#34;&gt;OpenMPとは&lt;/h2&gt;

&lt;p&gt;OpenMPは、並列コンピューティング環境を利用するために用いられる標準化された基盤。OpenMPは主に共有メモリ型並列計算機で用いられる。&lt;/p&gt;

&lt;p&gt;MPIでは明示的にメッセージの交換をプログラム中に記述しなければならないが、OpenMPはOpenMPが使用できない環境では無視されるディレクティブを挿入することによって並列化を行う。このため並列環境と非並列環境でほぼ同一のソースコードを使用できるという利点がある。 また、プラットフォーム固有のスレッドAPIを使わず、コンパイラによって暗黙的に生成されたスレッドプールを利用してタスクを振り分けることになるため、並列プログラムを簡潔に記述できるだけでなく、複数の環境に移植しやすくなる。&lt;/p&gt;

&lt;p&gt;MPIとの比較では、OpenMPは異なるスレッドが同一のデータを同じアドレスで参照できるのに対して、MPIでは明示的にメッセージ交換を行わなければならない。そのためSMP環境においては大きなデータの移動を行なわずにすむので高い効率が期待できる。ただし並列化の効率はコンパイラに依存するのでチューニングによる性能改善がMPIほど高くならないという問題がある。また、OpenMPはMPIに比べてメモリアクセスのローカリティが低くなる傾向があるので、頻繁なメモリアクセスがあるプログラムでは、MPIの方が高速な場合が多い&lt;/p&gt;

&lt;h2 id=&#34;openmpで使われれる指示文:a0a57c1b6e12579fe764acb009917377&#34;&gt;OpenMPで使われれる指示文&lt;/h2&gt;

&lt;p&gt;OpenMPではプログラム内で並列を行いたい場所に対して&lt;code&gt;#pragma&lt;/code&gt;を記述し&lt;code&gt;#pragma omp&lt;/code&gt;の形をとる&lt;/p&gt;

&lt;h3 id=&#34;並列リージョン指示文:a0a57c1b6e12579fe764acb009917377&#34;&gt;並列リージョン指示文&lt;/h3&gt;

&lt;p&gt;#pragma omp parallel&lt;/p&gt;

&lt;h3 id=&#34;処理分散指示文:a0a57c1b6e12579fe764acb009917377&#34;&gt;処理分散指示文&lt;/h3&gt;

&lt;p&gt;#pragma omp for&lt;/p&gt;

&lt;p&gt;#pragma omp sections&lt;/p&gt;

&lt;h3 id=&#34;同期に関する指示文:a0a57c1b6e12579fe764acb009917377&#34;&gt;同期に関する指示文&lt;/h3&gt;

&lt;p&gt;#pragma omp single&lt;/p&gt;

&lt;p&gt;#pragma omp master&lt;/p&gt;

&lt;p&gt;#pragma omp critical&lt;/p&gt;

&lt;p&gt;#pragma omp atomic&lt;/p&gt;

&lt;p&gt;#pragma omp barrier&lt;/p&gt;

&lt;p&gt;#pragma omp ordered&lt;/p&gt;

&lt;p&gt;#pragma omp flush&lt;/p&gt;

&lt;h2 id=&#34;openmpを用いたコード:a0a57c1b6e12579fe764acb009917377&#34;&gt;OpenMPを用いたコード&lt;/h2&gt;

&lt;h3 id=&#34;pragma-omp-parallelの例:a0a57c1b6e12579fe764acb009917377&#34;&gt;#pragma omp parallelの例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;studio.h&amp;gt;
#include &amp;lt;omp.h&amp;gt;
int main(void)
{
    #pragma omp parallel
    {
        printf(&amp;quot;Hello World!\n&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力結果:&lt;/p&gt;

&lt;p&gt;スレッドの数だけHello Worldを出力する&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;pragma-omp-parralel-forの例:a0a57c1b6e12579fe764acb009917377&#34;&gt;#pragma omp parralel forの例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;studio.h&amp;gt;
#include &amp;lt;omp.h&amp;gt;

int main(void)
{
    int i, a[100];
    #pragma omp parallel for
    for(i = 0; i &amp;lt; 100; i++){
        a[i]=0;
    }                   
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力結果:&lt;/p&gt;

&lt;p&gt;スレッド0番: for(i = 0; i &amp;lt; 25; i++) a[i]=0;&lt;/p&gt;

&lt;p&gt;スレッド1番: for(i = 25; i &amp;lt; 50; i++) a[i]=0;&lt;/p&gt;

&lt;p&gt;スレッド2番: for(i = 50; i &amp;lt; 75; i++) a[i]=0;&lt;/p&gt;

&lt;p&gt;スレッド3番: for(i = 75; i &amp;lt; 100; i++) a[i]=0;&lt;/p&gt;

&lt;h3 id=&#34;ファイルコピーの例:a0a57c1b6e12579fe764acb009917377&#34;&gt;ファイルコピーの例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/uio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#define BUF_SIZE 4096*1024
char buf1[BUF_SIZE];
char buf2[BUF_SIZE];

int main(int argc,char *argv[])
{
    int file_stc,file_dst;
    int size1, size2;
    if( argc != 3){
        printf(&amp;quot;usage: filecopy source-file dest-file\n&amp;quot;)
        return 1;
    }
    file_src=open(argv[1],O_RDONLY); 
    file_dst=open(argv[2],O_WRONLY|O_CREAT|O_TRUNC,S_IREAD|S_IWRITE);
    if( file_src==-1 || file_dst==-1 ){
        printf(&amp;quot;file read/write error\n&amp;quot;);
        return 1;
    }
    size1=read(file_src,buf1,BUF_SIZE);

    #pragma omp parallel sections num_threads(2)
    {
        #pragma omp section
        while(1){
            size2=read(file_src,buf2,BUF_SIZE);

            #pragma omp barrier
            if( size2 &amp;lt;= 0 ) 
                break;
            size1=read(file_src,buf1,BUF_SIZE);

            #pragma omp barrier
            if( size1&amp;lt;=0 ) 
                break;
        }
        #pragma omp section
        while(1){
            write(file_dst,buf1,size1);

            #pragma omp barrier
            if( size2&amp;lt;=0 ) 
                break;
            write(file_dst,buf2,size2);

            #pragma omp barrier
            if( size1&amp;lt;=0 ) break;
        } 
    }
    close(file_src);
    close(file_dst);
    return 0;
}                                                        
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:a0a57c1b6e12579fe764acb009917377&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/OpenMP&#34;&gt;OpenMP - Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.google.co.jp/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=6&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0CD8QFjAFahUKEwj1tLi-1_PIAhUFmJQKHSa_CaA&amp;amp;url=http%3A%2F%2Fwww.cc.u-tokyo.ac.jp%2Fsupport%2Fkosyu%2F03%2Fkosyu-openmp_c.pdf&amp;amp;usg=AFQjCNEJGbKtYlh39Etv42TzJpjyI8jDIQ&amp;amp;sig2=lAaDfPR0eogJo1v_3EuR8A&#34;&gt;C 言語による OpenMP 入門 - 東京大学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Githubのコミット名とブランチ名を適当に考えてみる</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-30-02/</link>
      <pubDate>Fri, 30 Oct 2015 20:04:07 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-30-02/</guid>
      <description>

&lt;p&gt;英語の場合のコミット名ブランチ名を適当に考えます。&lt;/p&gt;

&lt;h1 id=&#34;コミットに求められること:22a8f9a59cbc32861b4c14b3e79e9c37&#34;&gt;コミットに求められること&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;レビューするプロセスをスピードアップ&lt;/li&gt;
&lt;li&gt;良いリリースノートを書く手助け&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;基本:22a8f9a59cbc32861b4c14b3e79e9c37&#34;&gt;基本&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;大文字で始める&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;動詞で始める&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ピリオドを付けない&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;動詞は過去形,現在系&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;過去形と現在系は両方を見ますがGoogle, Microsoftなどのコミット名を見ると過去形で始めているものは少なかったり、他のサイトと比較をしても現在系を進めている(誰かに命令しているように書く方が論理的という考え方の)サイトが多いのが現状です。ですが基本的にはそのディレクトリの方式に合わせるのが一番です。&lt;/p&gt;

&lt;h3 id=&#34;よく使う動詞:22a8f9a59cbc32861b4c14b3e79e9c37&#34;&gt;よく使う動詞&lt;/h3&gt;

&lt;p&gt;新規追加 add 改善 improve, improved&lt;/p&gt;

&lt;p&gt;変更 change, changed&lt;/p&gt;

&lt;p&gt;修正 modify, modified&lt;/p&gt;

&lt;p&gt;バグフィックス fix, fixed&lt;/p&gt;

&lt;p&gt;削除 remove, removed&lt;/p&gt;

&lt;p&gt;取り消し revert, reverted&lt;/p&gt;

&lt;p&gt;更新 update, updated&lt;/p&gt;

&lt;p&gt;拡張 upgrade, upgraded&lt;/p&gt;

&lt;p&gt;有効 enable, enabled&lt;/p&gt;

&lt;p&gt;無効 disable, disabled&lt;/p&gt;

&lt;p&gt;拡張 extend, extended&lt;/p&gt;

&lt;p&gt;強化、向上 enhance, enhanced&lt;/p&gt;

&lt;p&gt;実装 implement, implemented&lt;/p&gt;

&lt;p&gt;リファクタ refactor, refactored&lt;/p&gt;

&lt;p&gt;最適化 optimize, optimized&lt;/p&gt;

&lt;p&gt;削減、切り詰め reduce, reduced&lt;/p&gt;

&lt;h1 id=&#34;ブランチに求められるもの:22a8f9a59cbc32861b4c14b3e79e9c37&#34;&gt;ブランチに求められるもの&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;中央ブランチを決めそれを中心としてブランチを作成する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;バグ編集等をしたいときにその時点の情報を保守したまま並行して編集をする&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;分岐したブランチは他のブランチの影響を受けないため、同じリポジトリ中で複数の変更を同時に進めていく&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;基本-1:22a8f9a59cbc32861b4c14b3e79e9c37&#34;&gt;基本&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;master,original(中央レポジトリ)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;リリース版が何時でも作成可能な状態。また、トピックブランチの分岐元としても使用します。そのため、安定した状態を保っておくことが重要。何らかの変更を行う場合は、トピックブランチを作成して作業を行うことが多い。Jenkins等のCIツールを使用した自動ビルドやテストはこのブランチを使って行う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;develop(中央レポジトリ)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;開発用。masterから分岐し、release-とmasterへマージする。&lt;/p&gt;

&lt;p&gt;先のリリースに向けた普段の開発で使用するブランチ。バグが存在する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;feature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;新機能の開発用。バグ修正を行う際にdevelopから分岐し、developへマージする。&lt;/p&gt;

&lt;p&gt;フィーチャーブランチでの作業は基本的に共有する必要がないので、リモートでは管理しません。開発が完了したら、developブランチにマージを行うことで公開します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;release-&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次回リリースの準備用。developから分岐し、developとmasterへマージする。&lt;/p&gt;

&lt;p&gt;リリースブランチ上で行った修正を取り込むため、developブランチに対してもマージを行います。リリースへ向けて最終調整が行われます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hotfix-&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;masterのバグフィックス用。masterから分岐し、developとmasterへマージする。&lt;/p&gt;

&lt;p&gt;何か緊急のバグが発生し早急に治す必要がある場合これを使い、通常のdevelopと分けます。&lt;/p&gt;

&lt;h2 id=&#34;引用元:22a8f9a59cbc32861b4c14b3e79e9c37&#34;&gt;引用元&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/hayajo/3938098&#34;&gt;ChangeLog を支える英語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.backlog.jp/git-guide/stepup/stepup1_2.html&#34;&gt;サルでもわかるGit入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>20posts!!!!!!!!!</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-30/</link>
      <pubDate>Fri, 30 Oct 2015 18:35:45 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-30/</guid>
      <description>&lt;p&gt;20posts!!!!!!!!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C#でSplashWindow(Screen)を表示させる</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-28/</link>
      <pubDate>Wed, 28 Oct 2015 19:39:58 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-28/</guid>
      <description>

&lt;p&gt;スプラッシュ(スプラッシュスクリーン)を特定処理が終わったら自動的に閉じて切り替えたりする。&lt;/p&gt;

&lt;h2 id=&#34;スプラッシュ-スプラッシュスクリーン-とは:b29053ff5e3dc3ee8ed7aab801e3a548&#34;&gt;スプラッシュ(スプラッシュスクリーン)とは&lt;/h2&gt;

&lt;p&gt;スプラッシュ(スプラッシュスクリーン)は起動時に処理のかかるアプリケーションを起動させる場合、ユーザーの不安を無くすために読み込んでます感を出すために表示されることが多い。基本的に画面全体を覆う大きさではなく、中央に表示される。VisualStudio, OfficeなどMSのアプリには大抵あります。&lt;/p&gt;

&lt;p&gt;WPFにはスプラッシュスクリーンという機能がありますが、素早く表示され初期化が終わった時点で自動的に消えます。これは表示タイミングと表示を消すタイミングを作成側が指定することができません。そこでWindowを作成しそれをスプラッシュスクリーンとして扱いApp.xamlからそれを操作します。&lt;/p&gt;

&lt;h2 id=&#34;code:b29053ff5e3dc3ee8ed7aab801e3a548&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;App.xaml.cs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class App : Application
{       
    private SplashWindow _splash;
    public SplashWindow Splash { get; private set; }

    public App() : base()
    {
        Startup += Application_Startup;
    }

    private void Application_Startup(object sender, StartupEventArgs e){        
        Splash = new SplashWindow();
        Splash.Show();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MainWindow.xaml.cs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();

        Loaded += MainWindow_Loaded;
    }

    public void MainWindow_Loaded(object sender, RoutedEventArgs e)
    {
        var app = Application.Current as App;
        if (app == null || app.Splash == null) return;
        app.Splash.Close();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;App.xamlでSplashを表示させ、MainWindowがロードし終わった時点でSplashWindowを閉じます。ですがこの閉じる動作は確実に行われるわけではないので不安ならusing等を使うとうまくいくかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;ついで:b29053ff5e3dc3ee8ed7aab801e3a548&#34;&gt;ついで&lt;/h2&gt;

&lt;p&gt;スプラッシュスクリーンを任意のタイミングまで表示させたい場合は&lt;code&gt;System.Threading.Thread.Sleep&lt;/code&gt;を利用しスレッドを無理やり停止させます&lt;/p&gt;

&lt;p&gt;App.xaml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public partial class App : Application
{
    void App_Startup(object sender, StartupEventArgs e)
    {
        System.Threading.Thread.Sleep(3000);

        Main = new MainWindow();
        Main.Show();
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>きのこの山とたけのこの里</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-25/</link>
      <pubDate>Sun, 25 Oct 2015 20:31:48 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-25/</guid>
      <description>

&lt;p&gt;きのこたけのこ戦争とは、1980年から現在にかけて、チョコレート分離主義・ハンマー族・ビスケット派を中心とするきのこの山陣営と、チョコレート混合主義・ドリル族・クッキー派を中心とするたけのこの里陣営との間で戦われている日本国最大級の内戦。1979年にたけのこの里が発足して以来、翌80年頃から小規模な派閥戦争が国内各地で頻発していたが、21世紀前後のインターネット普及により、戦火は瞬く間に日本全土へと拡大した。&lt;/p&gt;

&lt;h2 id=&#34;概要:f90657ce6925301ba1121f115f3d77c8&#34;&gt;概要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;1979年、明治製菓からたけのこの里が発足。4年もの間、チョコレート分離主義によってお茶の間の過半数を支配していたきのこの山だったが、たけのこの里が掲げるチョコレート混合主義にその領土を悉く奪われる。これを危機としたきのこの山陣営はたけのこの里陣営を市場侵略と批判。きのこ至上主義を訴えるが、それにたけのこの里が強く反発。両者共に主張を譲る事はなく、ここにきのこたけのこ戦争が勃発する。&lt;/p&gt;

&lt;p&gt;両派閥の出資者である明治製菓はこの事態を憂慮し、急遽1987年にすぎのこ村を設立。しかし、平和の象徴、緩衝地域として機能する予定だったすぎのこ村は、皮肉にもきのこたけのこ両陣営の激しい戦いによって歴史の地図から消滅する。講和条約は白紙へと戻され、この事件以降、明治製菓は文字通り「菓子の商人」として両派閥を背後から支援する存在となる。すぎのこ村は現在では廃村と化しているが、数年に一度復活するとの伝説が残されているという。&lt;/p&gt;

&lt;p&gt;きのこの山陣営は明治製菓の出資を背景に、20種類以上の限定商品を以ってお茶の間へと侵攻。同じ明治製菓の出資を受ける筈のたけのこ派はごく僅かな限定商品しか開発出来なかったが、数多くの若年層を取り込む事できのこ派に対抗。この格差には様々な説が論じられており、お茶の間の厭戦感情を考慮に入れた明治製菓の策であるとの説が有力である。しかしその一方で、明治製菓はきのこ・たけのこ両菓子の売り上げを競うというキャンペーンを数度にかけて行っており、菓子の商人としての辣腕を発揮している。&lt;/p&gt;

&lt;p&gt;この戦争において、きのこ派・たけのこ派共に多くの血が流れた（※もっぱら鼻からだが）。&lt;/p&gt;

&lt;p&gt;内戦は開戦より30年経過した21世紀の現在も尚続いており、収束する気配が無い。両派閥共に明治製菓の傘下にある為、これを商業戦争として批判するものも多く、また、明治製菓内ではきのこ派、たけのこ派のどちらに籍を置くかによって社内での出世が決まる程に派閥争いが深刻化している。更には多数の他菓子会社の武力介入により、戦局は迷走。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;たけのこの里:f90657ce6925301ba1121f115f3d77c8&#34;&gt;たけのこの里&lt;/h2&gt;

&lt;p&gt;たけのこのこそ最強である&lt;/p&gt;

&lt;p&gt;土台のクッキーとチョコレートのマッチ具合はたけのこの里が最も最強である。サクサクのクッキーに少し溶けかかったチョコレート これこそ人類が求めていたお菓子なのである。
さらに味については化学的にもたけのこの里の勝ちであることが判明している。(&lt;a href=&#34;http://girlschannel.net/topics/404736/&#34;&gt;きのこの山よりたけのこの里のほうがおいしいことが科学的に判明&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;それに対してきのこの山を見てみろ ただの硬いチョコレートにただの硬いクッキーが刺さっているだけではないか 味は科学的にもたけのこの里と比べ点数が-6.3点だ。&lt;/p&gt;

&lt;p&gt;これ以上比べる必要もないかと思うが 一応売り上げの比較を乗せる&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://image.itmedia.co.jp/news/articles/1402/04/moto_kinoko_chiikizentai.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;この画像からは日本全国どの地域であっても過半数をたけのこの里が超えていることがわかる このことから日本国民は圧倒的にたけのこの里が好みであることが見てわかる&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://image.itmedia.co.jp/news/articles/1402/04/moto_kinoko_cross.jpg&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;さらに年齢別グラフを載せる この画像からは前年代過半数をたけのこの里が超えていることがわかる 40代,50代では僅差になるがこれから未来を創る若者が圧倒的にたけのこの里なのだ 今後の戦争はさらにたけのこの里が力を上げることだろう&lt;/p&gt;

&lt;h2 id=&#34;まとめ:f90657ce6925301ba1121f115f3d77c8&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;記事を書くのが面倒だったため情報や内容が普段通りかなり薄いが、少ない情報からもたけのこの里の圧倒的人気,最強さがわかる &lt;strong&gt;繰り返すがたけのこの里こそ最強なのだ&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考サイト:f90657ce6925301ba1121f115f3d77c8&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dic.nicovideo.jp/a/%E3%81%8D%E3%81%AE%E3%81%93%E3%81%9F%E3%81%91%E3%81%AE%E3%81%93%E6%88%A6%E4%BA%89&#34;&gt; きのこたけのこ戦争&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://girlschannel.net/topics/404736/&#34;&gt;きのこの山よりたけのこの里のほうがおいしいことが科学的に判明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/news/articles/1402/04/news016.html&#34;&gt;「きのこの山」VS.「たけのこの里」戦争に決着!?　購買データ分析で“大差”あり&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;nani kono nihongo no okashii kizi gomen nasai&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C#でUpdateCheckをする</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-24/</link>
      <pubDate>Sat, 24 Oct 2015 21:07:25 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-24/</guid>
      <description>

&lt;p&gt;初めてまじめかもしれない記事&lt;/p&gt;

&lt;p&gt;OneceClickは便利だけどもどうせなら自分で(自動)アップデート機構を作りたいと思い適当に組みました  C#を使っています&lt;/p&gt;

&lt;p&gt;また例外に対し何もしていなかったり非同期ではなかったり初心者ソースになります&lt;/p&gt;

&lt;p&gt;Usingは適宜指定してください&lt;/p&gt;

&lt;h2 id=&#34;アップデートチェックだけ:511268231389866b3cfa797c488c371e&#34;&gt;アップデートチェックだけ&lt;/h2&gt;

&lt;p&gt;起動時にでも仕込ませて置けば十分だと思います。 このバージョンはとりあえず書いてあるファイルをそのまま読み込みその内容がProductVersionと違うかどうかを確認するだけです。&lt;/p&gt;

&lt;p&gt;この方式では通知をするだけです&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;string ver;

WebClient wc = new WebClient();

Stream st = wc.OpenRead(&amp;quot;調べるサイトURL&amp;quot;);

StreamReader sr = new StreamReader( st, Encoding.GetEncoding(51932));

ver = sr.ReadToEnd();

st.Close();

wc.Dispose();

if (ver != Application.ProductVersion)

{

    MessageBox.Show(&amp;quot;アップデートが∩(・＿・)∩あるでwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&amp;quot;);

}

else

{
    MessageBox.Show(&amp;quot;アップデートが(・＿・)ないwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&amp;quot;);
}    
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;アップデートチェックをしてその詳細情報を伝える:511268231389866b3cfa797c488c371e&#34;&gt;アップデートチェックをしてその詳細情報を伝える&lt;/h2&gt;

&lt;p&gt;こちらも起動時にでも仕込ませて置けば十分だと思います。 先ほどと違うのはアップデートチェックを行いその情報を取得,通知できるようにします。&lt;/p&gt;

&lt;p&gt;Xml解析を含んでいるのでアップデートチェックを行った後そのままファイルをダウンロードさせることが可能になります。ダウンロードURLが常に同じならこの方式をとる必要はありませんが、Githubにバージョン毎に公開していてそれを利用したい場合はこのようにするのがいいと思います。&lt;/p&gt;

&lt;p&gt;Xml解析の部分は特に初心者感が出てると思いますがご了承ください&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Version = Version情報&lt;/li&gt;
&lt;li&gt;Date = 更新日時&lt;/li&gt;
&lt;li&gt;Url = ダウンロードURL   としています&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;WebClient wc = new WebClient();

byte[] pagedata = wc.DownloadData(&amp;quot;調べるサイトURL&amp;quot;);

Encoding ec = Encoding.UTF8;

//Console.WriteLine(ec.GetString(pagedata));

XmlDocument xdoc = new XmlDocument();

xdoc.LoadXml(ec.GetString(pagedata));

XmlElement root = xdoc.DocumentElement;

XmlNodeList wc = root.SelectNodes(&amp;quot;Updata&amp;quot;);

var version = root.SelectSingleNode(&amp;quot;Version&amp;quot;).InnerText;
var date = root.SelectSingleNode(&amp;quot;Date&amp;quot;).InnerText;
var url = root.SelectSingleNode(&amp;quot;URL&amp;quot;).InnerText;

wc.Dispose();

if (version != Application.ProductVersion)

{

    MessageBox.Show(&amp;quot;アップデートが∩(・＿・)∩あるでwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&amp;quot;);
    Console.WriteLine(&amp;quot;Version:{0} 更新日時:{1} ダウンロードURL:{2}&amp;quot;, version, date, url);
    //ダウンロード, 解凍させ上書きする機構
}

else

{
    MessageBox.Show(&amp;quot;アップデートが(・＿・)ないwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&amp;quot;);
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;今回解析したXmlの配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Updata&amp;gt;
    &amp;lt;Version&amp;gt;1.0.0&amp;lt;/Version&amp;gt;
    &amp;lt;Date&amp;gt;2015/0/0&amp;lt;/Date&amp;gt;
    &amp;lt;URL&amp;gt;URL&amp;lt;/URL&amp;gt;
&amp;lt;/Updata&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>BattleField4 リコイルがひどかった</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-18/</link>
      <pubDate>Sun, 18 Oct 2015 14:31:25 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-18/</guid>
      <description>

&lt;p&gt;BF4 の二点バースト日記&lt;/p&gt;

&lt;h2 id=&#34;2015-06-15:b1e43995edba1bdef111c49c3e3de23a&#34;&gt;2015-06-15&lt;/h2&gt;

&lt;p&gt;&lt;iframe class=&#34;youtubeplayer&#34; type=&#34;text/html&#34; width=&#34;500&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/6xhNgDcPBEk&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;POTATO GRIP(?), HEAVY BARREL&lt;/p&gt;

&lt;h2 id=&#34;2015-10-18:b1e43995edba1bdef111c49c3e3de23a&#34;&gt;2015-10-18&lt;/h2&gt;

&lt;p&gt;&lt;iframe class=&#34;youtubeplayer&#34; type=&#34;text/html&#34; width=&#34;500&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/uvz5ofWphtM&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;ERGO GRIP, HEAVY BARREL&lt;/p&gt;

&lt;h2 id=&#34;感想:b1e43995edba1bdef111c49c3e3de23a&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;ヘリ楽&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HugoのShortCodeでTwitterTweetの埋め込みをする</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-17/</link>
      <pubDate>Sat, 17 Oct 2015 16:12:53 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-17/</guid>
      <description>

&lt;p&gt;このシリーズ無駄に3つ目 shortcode使うより埋め込むを利用した方が速い気がします&lt;/p&gt;

&lt;p&gt;今回はTwitterのTweetを埋め込みます&lt;/p&gt;

&lt;h2 id=&#34;デモ:ab327018fe4ea958a7b31d6c47785a29&#34;&gt;デモ&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;a href=&#34;https://twitter.com/jack/status/20&#34;&gt;&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;使用方法:ab327018fe4ea958a7b31d6c47785a29&#34;&gt;使用方法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{.{&amp;lt; twittertweet name=&amp;quot;twitter id,name&amp;quot; id=&amp;quot;tweet id&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ShortCode対策でピリオドを入れています&lt;/p&gt;

&lt;h2 id=&#34;ソース:ab327018fe4ea958a7b31d6c47785a29&#34;&gt;ソース&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;blockquote class=&amp;quot;twitter-tweet&amp;quot; lang=&amp;quot;ja&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;https://twitter.com/{{ .Get &amp;quot;name&amp;quot; }}/status/{{ .Get &amp;quot;id&amp;quot; }}&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;quot;//platform.twitter.com/widgets.js&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>HugoのShortCodeでYoutubePlayerの埋め込みをする</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-16/</link>
      <pubDate>Fri, 16 Oct 2015 18:09:22 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-16/</guid>
      <description>

&lt;h2 id=&#34;デモ:d0abd677cd519e0eba22ff99135df0aa&#34;&gt;デモ&lt;/h2&gt;

&lt;p&gt;&lt;iframe class=&#34;youtubeplayer&#34; type=&#34;text/html&#34; width=&#34;500&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/SQfmvtO-U18&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;それだけです&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugoのshortcodesでnicovideoの埋め込みを簡単にする</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-15/</link>
      <pubDate>Thu, 15 Oct 2015 19:15:34 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-15/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://qiita.com/kounoike/items/cdbfaa2dab9bd3393a84&#34;&gt;Hugoのshortcodesでnicovideoの埋め込みを簡単にする&lt;/a&gt; Qiitaで面白い記事を見つけたので早速使ってみました Hugoの&lt;a href=&#34;https://gohugo.io/extras/shortcodes/&#34;&gt;shortcodes&lt;/a&gt;機能を利用して埋め込みを簡単にするようです&lt;/p&gt;

&lt;h2 id=&#34;デモ:35cdcb305d5f6a36204b574250e16183&#34;&gt;デモ&lt;/h2&gt;

&lt;p&gt;&lt;iframe class=&#34;nicovideo&#34; type=&#34;text/html&#34; width=&#34;312&#34; height=&#34;200&#34; src=&#34;http://ext.nicovideo.jp/thumb/sm9&#34; scrolling=&#34;no&#34; style=&#34;border:solid 1px #CCC;&#34; frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script class=&#34;nicovideoplayer&#34; type=&#34;text/javascript&#34; src=&#34;http://ext.nicovideo.jp/thumb_watch/sm9?w=500&amp;amp;h=315&#34;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;a href=&#34;http://www.nicovideo.jp/watch/sm9&#34;&gt;新・豪血寺一族 -煩悩解放 - レッツゴー！陰陽師&lt;/a&gt;&lt;/noscript&gt;&lt;/p&gt;

&lt;p&gt;詳しい説明は &lt;strong&gt;&lt;a href=&#34;http://qiita.com/kounoike/items/cdbfaa2dab9bd3393a84&#34;&gt;Hugoのshortcodesでnicovideoの埋め込みを簡単にする&lt;/a&gt;&lt;/strong&gt; をご覧ください&lt;/p&gt;

&lt;h2 id=&#34;link:35cdcb305d5f6a36204b574250e16183&#34;&gt;Link&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://qiita.com/kounoike/items/cdbfaa2dab9bd3393a84&#34;&gt;Hugoのshortcodesでnicovideoの埋め込みを簡単にする&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/extras/shortcodes/&#34;&gt;Shortcodes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>VSCode v0.9.1</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-14-02/</link>
      <pubDate>Wed, 14 Oct 2015 19:06:45 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-14-02/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/updates#_debugging-performance&#34;&gt;VSCode V0.9.1&lt;/a&gt;
10月アップデート 日本語訳まとめ&lt;/p&gt;

&lt;p&gt;ここを見るより本文を読んだ方が速いし正確です&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://code.visualstudio.com/Content/images/0_9_0_summary.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;拡張機能のインストール先の変更:5b2c63018712c011a2c8e39821ecd6ca&#34;&gt;拡張機能のインストール先の変更&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;拡張機能のインストール先がユーザーディレクトリの下になった&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Windows &lt;code&gt;%USERPROFILE%\.vscode\extensions&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mac &lt;code&gt;$HOME/.vscode/extensions&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Linux &lt;code&gt;$HOME/.vscode/extensions&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;yeomanで機能拡張開発:5b2c63018712c011a2c8e39821ecd6ca&#34;&gt;Yeomanで機能拡張開発&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;プログラミング言語向けのシンタックスハイライトの設定&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;テーマの開発&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;1.&lt;code&gt;npm install -g yo&lt;/code&gt; 2.&lt;code&gt;npm install -g generator-code&lt;/code&gt; でジェネレーターのインストール&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;デバッグコンソールの拡張-改善:5b2c63018712c011a2c8e39821ecd6ca&#34;&gt;デバッグコンソールの拡張,改善&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;視認性の向上&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;コンテキストメニューの拡張&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;要素の拡張がセッション間で保持される&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;typescript-1-6への対応:5b2c63018712c011a2c8e39821ecd6ca&#34;&gt;TypeScript 1.6への対応&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;version&amp;quot;: &amp;quot;0.1.0&amp;quot;,
    &amp;quot;command&amp;quot;: &amp;quot;tsc&amp;quot;,
    &amp;quot;isShellCommand&amp;quot;: true,
    // define the task to be a watching task
    &amp;quot;isWatching&amp;quot;: true,
    // use the standard tsc in watch mode problem matcher to find compile problems in the output.
    &amp;quot;problemMatcher&amp;quot;: &amp;quot;$tsc-watch&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;markdownのプレビュー機能拡張:5b2c63018712c011a2c8e39821ecd6ca&#34;&gt;Markdownのプレビュー機能拡張&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全体のフォントサイズ,感覚の最適化&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;画像などのプレビューにも対応(?)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;unity-shader-fileでのシンタックスハイライトのサポート:5b2c63018712c011a2c8e39821ecd6ca&#34;&gt;Unity Shader Fileでのシンタックスハイライトのサポート&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;シンタックスハイライトのサポート&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;新しい設定:5b2c63018712c011a2c8e39821ecd6ca&#34;&gt;新しい設定&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;window.openInNewWindow&lt;/code&gt; 新しいファイルを新しいウィンドウで開く or 最後にアクティブになったウィンドウを再利用して開く&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;window.reopenFolders&lt;/code&gt; 前回閉じたフォルダの再展開でスタート or 再展開しないでスタート&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;バグ修正:5b2c63018712c011a2c8e39821ecd6ca&#34;&gt;バグ修正&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;18998: newly added files not honored by tsconfig.json&lt;/li&gt;
&lt;li&gt;18692: Changes to tsconfig.json not updated immediately&lt;/li&gt;
&lt;li&gt;19239: Detaching from Unity Results in a Unity Crash&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;link:5b2c63018712c011a2c8e39821ecd6ca&#34;&gt;Link&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Vscode&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugo Theme angels-ladder</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-14/</link>
      <pubDate>Wed, 14 Oct 2015 15:31:33 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-14/</guid>
      <description>

&lt;p&gt;自分が見たいだけのプレビュー&lt;/p&gt;

&lt;h1 id=&#34;h1:9f2c9f40a6602cf64ca17552faf5a773&#34;&gt;H1&lt;/h1&gt;

&lt;h2 id=&#34;h2:9f2c9f40a6602cf64ca17552faf5a773&#34;&gt;H2&lt;/h2&gt;

&lt;h3 id=&#34;h3-h4-h5-h6:9f2c9f40a6602cf64ca17552faf5a773&#34;&gt;H3,H4,H5,H6&lt;/h3&gt;

&lt;p&gt;default&lt;/p&gt;

&lt;p&gt;&lt;del&gt;Strikethrough&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bold&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Emphasis&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;This is Code!&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is Code!
&lt;/code&gt;&lt;/pre&gt;

&lt;script src=&#34;https://gist.github.com/EbXpJ6bp/0bbc4df5b511f18d8156.js&#34;&gt;&lt;/script&gt;     
 

&lt;blockquote&gt;
&lt;p&gt;Blockquotes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;#&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Left align&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Right align&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Center align&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;This&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;This&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;This&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;column&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;column&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;column&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;will&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;will&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;will&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;be&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;be&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;be&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;left&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;right&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;center&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;aligned&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;aligned&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;aligned&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;shortcodes:9f2c9f40a6602cf64ca17552faf5a773&#34;&gt;Shortcodes&lt;/h2&gt;

&lt;p&gt;本家にはありません&lt;/p&gt;

&lt;p&gt;&lt;iframe class=&#34;nicovideo&#34; type=&#34;text/html&#34; width=&#34;312&#34; height=&#34;200&#34; src=&#34;http://ext.nicovideo.jp/thumb/sm9&#34; scrolling=&#34;no&#34; style=&#34;border:solid 1px #CCC;&#34; frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script class=&#34;nicovideoplayer&#34; type=&#34;text/javascript&#34; src=&#34;http://ext.nicovideo.jp/thumb_watch/sm9?w=500&amp;amp;h=315&#34;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;a href=&#34;http://www.nicovideo.jp/watch/sm9&#34;&gt;新・豪血寺一族 -煩悩解放 - レッツゴー！陰陽師&lt;/a&gt;&lt;/noscript&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe class=&#34;youtubeplayer&#34; type=&#34;text/html&#34; width=&#34;500&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/SQfmvtO-U18&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;a href=&#34;https://twitter.com/jack/status/20&#34;&gt;&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;link:9f2c9f40a6602cf64ca17552faf5a773&#34;&gt;Link&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://qiita.com/Qiita/items/c686397e4a0f4f11683d&#34;&gt;Markdown記法 チートシート&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/tanksuzuki/angels-ladder&#34;&gt;tanksuzuki/angels-ladder&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Minecraftで出来るFPS RefineFPS</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-12/</link>
      <pubDate>Mon, 12 Oct 2015 09:48:14 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-12/</guid>
      <description>

&lt;p&gt;RefineFPSについて何が言いたいのかよくわからない記事&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ebxpj6bp.github.io/images/2015-10-12.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;refinefpsとは:0ea62ef95db9728c12a858c5f03ce084&#34;&gt;RefineFPSとは&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;RefineFPS Server とは11月3日にオープンβとしてサービス開始した
Minecraft というサンドボックス型ゲームのマルチサーバーです。
「洗練されたFPSゲーム」をコンセプトに運営しています(鯖名もその通り)。
RefineFPSでは本格的なゲームをユーザーの皆様方に提供しております。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;del&gt;運営が働かないクソ鯖&lt;/del&gt;　民度がとてもよく「ha?」「uza」「shine」がよく飛び交う楽しいFPSサーバーです-　&lt;/p&gt;

&lt;p&gt;武器の種類は大きく分けて8種類「AR, SR, SG, SMG, MG, HG, Grende, Knife」 ゲーム中のインベントリには「AR~MG, HG, Grende, Knife」の4種類が入ります&lt;/p&gt;

&lt;h2 id=&#34;refinefpsの現状:0ea62ef95db9728c12a858c5f03ce084&#34;&gt;RefineFPSの現状&lt;/h2&gt;

&lt;p&gt;2014/12/03 - 2014/12/21 に&lt;a href=&#34;http://fps.mcsv.jp/Event/1stAnniversarySlot&#34;&gt;アニバーサリスロット&lt;/a&gt;イベントが行われたのち約5ヵ月更新なし&lt;/p&gt;

&lt;p&gt;2014/05/07 &lt;a href=&#34;http://fps.mcsv.jp/News/Index/57&#34;&gt;ガチャ&lt;/a&gt;の登場 登場し少し回せただけでイベントではなかった&lt;/p&gt;

&lt;p&gt;2015/08/24 &lt;a href=&#34;http://fps.mcsv.jp/Event/Mallon2015&#34;&gt;栗をくりぃ&lt;/a&gt;約8ヵ月ぶりのイベントが行われた しかし本来であれば09/13まで行われるはずだったが08/27までの短縮になりイベントが行われたのは3日間だった&lt;/p&gt;

&lt;p&gt;2015/10/12 更新なし&lt;/p&gt;

&lt;p&gt;運営増やす予定なし&lt;/p&gt;

&lt;h2 id=&#34;link:0ea62ef95db9728c12a858c5f03ce084&#34;&gt;Link&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://fps.mcsv.jp/&#34;&gt;RefineFPS-HP&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://twitter.com/RefineFPS&#34;&gt;RefineFPS-Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://refinefps.wiki.fc2.com/&#34;&gt;RefineFPS-Wiki&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://ebxpj6bp.github.io/about/</link>
      <pubDate>Sun, 11 Oct 2015 13:03:07 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/about/</guid>
      <description>&lt;p&gt;初めまして EbXpJ6bp と申します &lt;a href=&#34;http://frainworks.tk/&#34;&gt;Frainworks&lt;/a&gt;でサークル活動をしています&lt;/p&gt;

&lt;p&gt;IT系全般に興味があります 暗号技術について勉強しようと思っています&lt;/p&gt;

&lt;p&gt;&lt;i class=&#34;fa fa-code&#34;&gt;&lt;/i&gt;: C / C# +WPF / WEB&lt;/p&gt;

&lt;div id=&#34;social-icon&#34;&gt;
&lt;a href=&#34;https://twitter.com/EbXpJ6bp&#34;&gt;&lt;i class=&#34;fa fa-twitter fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;a href=&#34;https://github.com/EbXpJ6bp&#34;&gt;&lt;i class=&#34;fa fa-github-alt fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;a href=&#34;https://bitbucket.org/EbXpJ6bp-/&#34;&gt;&lt;i class=&#34;fa fa-bitbucket fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;a href=&#34;skype:syun_0109?chat&#34;&gt;&lt;i class=&#34;fa fa-skype fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;a href=&#34;mail:ebxpj6bp@outlook.jp&#34;&gt;&lt;i class=&#34;fa fa-envelope fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;a href=&#34;https://www.amazon.co.jp/gp/registry/ref=cm_reg_rd-upd?ie=UTF8&amp;id=19NFR84S4IYA2&amp;type=wishlist&#34;&gt;&lt;i class=&#34;fa fa-amazon fa-lg&#34;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>匿名OSTails</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-10/</link>
      <pubDate>Sat, 10 Oct 2015 07:23:10 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-10/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://gigazine.net/news/20150825-torrent-tracker-ban-windows-10/&#34;&gt;Windows 10では著作権侵害行為に関する情報が外部に送信されているという疑念の声&lt;/a&gt;こんな記事が広まってから匿名の需要が高まってきました この記事が出る前にも政府機関が世界のネットワークを監視していることが一時期話題になったこともあります&lt;/p&gt;

&lt;p&gt;ただ、完全な匿名で通信したいと思ってもすべて自前でやろうとするはあまりコスパがいいとは言えません 当然WindowsでTorを使っても匿名とは言えなくなってきました そこでおすすめするのは&lt;a href=&#34;https://tails.boum.org/&#34;&gt;tails&lt;/a&gt;(LinuxベースのOS)です&lt;/p&gt;

&lt;h2 id=&#34;tails-https-tails-boum-org:007242a7141a39204898ccb0f4aa5409&#34;&gt;&lt;a href=&#34;https://tails.boum.org/&#34;&gt;TAILS&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;tailsはとても高い匿名性を持っていて &lt;strong&gt;Torを用いたオンラインでの匿名化, ほぼすべての場所でつかえ痕跡を残さない, 最新の暗号化&lt;/strong&gt;を備えています&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tails is a live system that aims to preserve your privacy and anonymity. It helps you to use the Internet anonymously and circumvent censorship almost anywhere you go and on any computer but leaving no trace unless you ask it to explicitly. It is a complete operating system designed to be used from a DVD, USB stick, or SD card independently of the computer&amp;rsquo;s original operating system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;Tails is configured with special care to not use the computer&amp;rsquo;s hard-disks, even if there is some swap space on them. The only storage space used by Tails is the RAM, which is automatically erased when the computer shuts down. So you won&amp;rsquo;t leave any trace neither of the Tails system nor of what you did on the computer. That&amp;rsquo;s why we call it &amp;ldquo;amnesic&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;またtailsにはソフトウェアがいくつか標準装備されています&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;オンラインでの匿名性&lt;/strong&gt;：通信匿名化技術「Tor」を使った『Iceweasel』ブラウザを搭載、完全に匿名でのウェブブラウジングを実現しています。また、セキュリティも充実しており、通信の安全性を高める『HTTPS Everywhere』、広告をブロックする『Adblock Plus』、JavaやFlashをブロックする『 NoScript』などの拡張機能を備えています。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;暗号化されたメールとチャット&lt;/strong&gt;：OpenPGP技術を使ってメールを暗号化する『Clawsメールクライント』や、OTR暗号技術でメッセージを暗号化するIMクライアント『Pidgin』も標準搭載。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ファイル暗号化&lt;/strong&gt;：LUKSと呼ばれる暗号技術を使って、ファイルを暗号化してUSBドライブに保存することが可能。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;編集ソフトも充実&lt;/strong&gt;：ウェブへのアクセスだけでなく、各種編集ソフトも利用可能。ドキュメント編集ソフト『Openoffice』、写真編集ソフト『Gimp』、サウンド編集ソフト『Audacity』、ほかにも様々なツールを標準搭載しています。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;さいごに:007242a7141a39204898ccb0f4aa5409&#34;&gt;さいごに&lt;/h2&gt;

&lt;p&gt;もちろんtailsにも弱点がいくつかあります弱点のないものなんてありません ですが&lt;strong&gt;OSデータの入った機器の盗難,紛失 他人に知られない,わからないパスワード 守りたい匿名情報を口にしない&lt;/strong&gt; などごく一般的な対応をすれば普通の人であれば十分だと思います&lt;/p&gt;

&lt;p&gt;ダウンロードして試すのではなく 自分自身で安全性を調べ自分が安心して使えると思ってからインストールするようにしてください&lt;/p&gt;

&lt;h2 id=&#34;参考文章:007242a7141a39204898ccb0f4aa5409&#34;&gt;参考文章&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.lifehacker.jp/2012/11/121128tails.html&#34;&gt;http://www.lifehacker.jp/2012/11/121128tails.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>