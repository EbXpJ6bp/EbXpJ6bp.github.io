<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Opoenmp on EbXpJ6bp&#39;s Blog</title>
    <link>http://ebxpj6bp.github.io/blog/tags/opoenmp/</link>
    <description>Recent content in Opoenmp on EbXpJ6bp&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 03 Nov 2015 16:03:34 +0900</lastBuildDate>
    <atom:link href="http://ebxpj6bp.github.io/blog/tags/opoenmp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>C言語による並列処理の勉強をしたかった。</title>
      <link>http://ebxpj6bp.github.io/blog/post/2015-11-03/</link>
      <pubDate>Tue, 03 Nov 2015 16:03:34 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/blog/post/2015-11-03/</guid>
      <description>

&lt;p&gt;C言語による並列処理の勉強をしたかった。備忘録&lt;/p&gt;

&lt;h2 id=&#34;openmpとは:a0a57c1b6e12579fe764acb009917377&#34;&gt;OpenMPとは&lt;/h2&gt;

&lt;p&gt;OpenMPは、並列コンピューティング環境を利用するために用いられる標準化された基盤。OpenMPは主に共有メモリ型並列計算機で用いられる。&lt;/p&gt;

&lt;p&gt;MPIでは明示的にメッセージの交換をプログラム中に記述しなければならないが、OpenMPはOpenMPが使用できない環境では無視されるディレクティブを挿入することによって並列化を行う。このため並列環境と非並列環境でほぼ同一のソースコードを使用できるという利点がある。 また、プラットフォーム固有のスレッドAPIを使わず、コンパイラによって暗黙的に生成されたスレッドプールを利用してタスクを振り分けることになるため、並列プログラムを簡潔に記述できるだけでなく、複数の環境に移植しやすくなる。&lt;/p&gt;

&lt;p&gt;MPIとの比較では、OpenMPは異なるスレッドが同一のデータを同じアドレスで参照できるのに対して、MPIでは明示的にメッセージ交換を行わなければならない。そのためSMP環境においては大きなデータの移動を行なわずにすむので高い効率が期待できる。ただし並列化の効率はコンパイラに依存するのでチューニングによる性能改善がMPIほど高くならないという問題がある。また、OpenMPはMPIに比べてメモリアクセスのローカリティが低くなる傾向があるので、頻繁なメモリアクセスがあるプログラムでは、MPIの方が高速な場合が多い&lt;/p&gt;

&lt;h2 id=&#34;openmpで使われれる指示文:a0a57c1b6e12579fe764acb009917377&#34;&gt;OpenMPで使われれる指示文&lt;/h2&gt;

&lt;p&gt;OpenMPではプログラム内で並列を行いたい場所に対して&lt;code&gt;#pragma&lt;/code&gt;を記述し&lt;code&gt;#pragma omp&lt;/code&gt;の形をとる&lt;/p&gt;

&lt;h3 id=&#34;並列リージョン指示文:a0a57c1b6e12579fe764acb009917377&#34;&gt;並列リージョン指示文&lt;/h3&gt;

&lt;p&gt;#pragma omp parallel&lt;/p&gt;

&lt;h3 id=&#34;処理分散指示文:a0a57c1b6e12579fe764acb009917377&#34;&gt;処理分散指示文&lt;/h3&gt;

&lt;p&gt;#pragma omp for&lt;/p&gt;

&lt;p&gt;#pragma omp sections&lt;/p&gt;

&lt;h3 id=&#34;同期に関する指示文:a0a57c1b6e12579fe764acb009917377&#34;&gt;同期に関する指示文&lt;/h3&gt;

&lt;p&gt;#pragma omp single&lt;/p&gt;

&lt;p&gt;#pragma omp master&lt;/p&gt;

&lt;p&gt;#pragma omp critical&lt;/p&gt;

&lt;p&gt;#pragma omp atomic&lt;/p&gt;

&lt;p&gt;#pragma omp barrier&lt;/p&gt;

&lt;p&gt;#pragma omp ordered&lt;/p&gt;

&lt;p&gt;#pragma omp flush&lt;/p&gt;

&lt;h2 id=&#34;openmpを用いたコード:a0a57c1b6e12579fe764acb009917377&#34;&gt;OpenMPを用いたコード&lt;/h2&gt;

&lt;h3 id=&#34;pragma-omp-parallelの例:a0a57c1b6e12579fe764acb009917377&#34;&gt;#pragma omp parallelの例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;studio.h&amp;gt;
#include &amp;lt;omp.h&amp;gt;
int main(void)
{
    #pragma omp parallel
    {
        printf(&amp;quot;Hello World!\n&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力結果:&lt;/p&gt;

&lt;p&gt;スレッドの数だけHello Worldを出力する&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;pragma-omp-parralel-forの例:a0a57c1b6e12579fe764acb009917377&#34;&gt;#pragma omp parralel forの例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;studio.h&amp;gt;
#include &amp;lt;omp.h&amp;gt;

int main(void)
{
    int i, a[100];
    #pragma omp parallel for
    for(i = 0; i &amp;lt; 100; i++){
        a[i]=0;
    }                   
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力結果:&lt;/p&gt;

&lt;p&gt;スレッド0番: for(i = 0; i &amp;lt; 25; i++) a[i]=0;&lt;/p&gt;

&lt;p&gt;スレッド1番: for(i = 25; i &amp;lt; 50; i++) a[i]=0;&lt;/p&gt;

&lt;p&gt;スレッド2番: for(i = 50; i &amp;lt; 75; i++) a[i]=0;&lt;/p&gt;

&lt;p&gt;スレッド3番: for(i = 75; i &amp;lt; 100; i++) a[i]=0;&lt;/p&gt;

&lt;h3 id=&#34;ファイルコピーの例:a0a57c1b6e12579fe764acb009917377&#34;&gt;ファイルコピーの例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/uio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#define BUF_SIZE 4096*1024
char buf1[BUF_SIZE];
char buf2[BUF_SIZE];

int main(int argc,char *argv[])
{
    int file_stc,file_dst;
    int size1, size2;
    if( argc != 3){
        printf(&amp;quot;usage: filecopy source-file dest-file\n&amp;quot;)
        return 1;
    }
    file_src=open(argv[1],O_RDONLY); 
    file_dst=open(argv[2],O_WRONLY|O_CREAT|O_TRUNC,S_IREAD|S_IWRITE);
    if( file_src==-1 || file_dst==-1 ){
        printf(&amp;quot;file read/write error\n&amp;quot;);
        return 1;
    }
    size1=read(file_src,buf1,BUF_SIZE);

    #pragma omp parallel sections num_threads(2)
    {
        #pragma omp section
        while(1){
            size2=read(file_src,buf2,BUF_SIZE);

            #pragma omp barrier
            if( size2 &amp;lt;= 0 ) 
                break;
            size1=read(file_src,buf1,BUF_SIZE);

            #pragma omp barrier
            if( size1&amp;lt;=0 ) 
                break;
        }
        #pragma omp section
        while(1){
            write(file_dst,buf1,size1);

            #pragma omp barrier
            if( size2&amp;lt;=0 ) 
                break;
            write(file_dst,buf2,size2);

            #pragma omp barrier
            if( size1&amp;lt;=0 ) break;
        } 
    }
    close(file_src);
    close(file_dst);
    return 0;
}                                                        
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:a0a57c1b6e12579fe764acb009917377&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/OpenMP&#34;&gt;OpenMP - Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.google.co.jp/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=6&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0CD8QFjAFahUKEwj1tLi-1_PIAhUFmJQKHSa_CaA&amp;amp;url=http%3A%2F%2Fwww.cc.u-tokyo.ac.jp%2Fsupport%2Fkosyu%2F03%2Fkosyu-openmp_c.pdf&amp;amp;usg=AFQjCNEJGbKtYlh39Etv42TzJpjyI8jDIQ&amp;amp;sig2=lAaDfPR0eogJo1v_3EuR8A&#34;&gt;C 言語による OpenMP 入門 - 東京大学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>