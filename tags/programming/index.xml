<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on EbXpJ6bp&#39;s Blog</title>
    <link>http://ebxpj6bp.github.io/tags/programming/</link>
    <description>Recent content in Programming on EbXpJ6bp&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 03 Nov 2015 16:03:34 +0900</lastBuildDate>
    <atom:link href="http://ebxpj6bp.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>C言語による並列処理の勉強をしたかった。</title>
      <link>http://ebxpj6bp.github.io/post/2015-11-03/</link>
      <pubDate>Tue, 03 Nov 2015 16:03:34 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-11-03/</guid>
      <description>

&lt;p&gt;C言語による並列処理の勉強をしたかった。備忘録&lt;/p&gt;

&lt;h2 id=&#34;openmpとは:a0a57c1b6e12579fe764acb009917377&#34;&gt;OpenMPとは&lt;/h2&gt;

&lt;p&gt;OpenMPは、並列コンピューティング環境を利用するために用いられる標準化された基盤。OpenMPは主に共有メモリ型並列計算機で用いられる。&lt;/p&gt;

&lt;p&gt;MPIでは明示的にメッセージの交換をプログラム中に記述しなければならないが、OpenMPはOpenMPが使用できない環境では無視されるディレクティブを挿入することによって並列化を行う。このため並列環境と非並列環境でほぼ同一のソースコードを使用できるという利点がある。 また、プラットフォーム固有のスレッドAPIを使わず、コンパイラによって暗黙的に生成されたスレッドプールを利用してタスクを振り分けることになるため、並列プログラムを簡潔に記述できるだけでなく、複数の環境に移植しやすくなる。&lt;/p&gt;

&lt;p&gt;MPIとの比較では、OpenMPは異なるスレッドが同一のデータを同じアドレスで参照できるのに対して、MPIでは明示的にメッセージ交換を行わなければならない。そのためSMP環境においては大きなデータの移動を行なわずにすむので高い効率が期待できる。ただし並列化の効率はコンパイラに依存するのでチューニングによる性能改善がMPIほど高くならないという問題がある。また、OpenMPはMPIに比べてメモリアクセスのローカリティが低くなる傾向があるので、頻繁なメモリアクセスがあるプログラムでは、MPIの方が高速な場合が多い&lt;/p&gt;

&lt;h2 id=&#34;openmpで使われれる指示文:a0a57c1b6e12579fe764acb009917377&#34;&gt;OpenMPで使われれる指示文&lt;/h2&gt;

&lt;p&gt;OpenMPではプログラム内で並列を行いたい場所に対して&lt;code&gt;#pragma&lt;/code&gt;を記述し&lt;code&gt;#pragma omp&lt;/code&gt;の形をとる&lt;/p&gt;

&lt;h3 id=&#34;並列リージョン指示文:a0a57c1b6e12579fe764acb009917377&#34;&gt;並列リージョン指示文&lt;/h3&gt;

&lt;p&gt;#pragma omp parallel&lt;/p&gt;

&lt;h3 id=&#34;処理分散指示文:a0a57c1b6e12579fe764acb009917377&#34;&gt;処理分散指示文&lt;/h3&gt;

&lt;p&gt;#pragma omp for&lt;/p&gt;

&lt;p&gt;#pragma omp sections&lt;/p&gt;

&lt;h3 id=&#34;同期に関する指示文:a0a57c1b6e12579fe764acb009917377&#34;&gt;同期に関する指示文&lt;/h3&gt;

&lt;p&gt;#pragma omp single&lt;/p&gt;

&lt;p&gt;#pragma omp master&lt;/p&gt;

&lt;p&gt;#pragma omp critical&lt;/p&gt;

&lt;p&gt;#pragma omp atomic&lt;/p&gt;

&lt;p&gt;#pragma omp barrier&lt;/p&gt;

&lt;p&gt;#pragma omp ordered&lt;/p&gt;

&lt;p&gt;#pragma omp flush&lt;/p&gt;

&lt;h2 id=&#34;openmpを用いたコード:a0a57c1b6e12579fe764acb009917377&#34;&gt;OpenMPを用いたコード&lt;/h2&gt;

&lt;h3 id=&#34;pragma-omp-parallelの例:a0a57c1b6e12579fe764acb009917377&#34;&gt;#pragma omp parallelの例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;studio.h&amp;gt;
#include &amp;lt;omp.h&amp;gt;
int main(void)
{
    #pragma omp parallel
    {
        printf(&amp;quot;Hello World!\n&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力結果:&lt;/p&gt;

&lt;p&gt;スレッドの数だけHello Worldを出力する&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;pragma-omp-parralel-forの例:a0a57c1b6e12579fe764acb009917377&#34;&gt;#pragma omp parralel forの例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;studio.h&amp;gt;
#include &amp;lt;omp.h&amp;gt;

int main(void)
{
    int i, a[100];
    #pragma omp parallel for
    for(i = 0; i &amp;lt; 100; i++){
        a[i]=0;
    }                   
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力結果:&lt;/p&gt;

&lt;p&gt;スレッド0番: for(i = 0; i &amp;lt; 25; i++) a[i]=0;&lt;/p&gt;

&lt;p&gt;スレッド1番: for(i = 25; i &amp;lt; 50; i++) a[i]=0;&lt;/p&gt;

&lt;p&gt;スレッド2番: for(i = 50; i &amp;lt; 75; i++) a[i]=0;&lt;/p&gt;

&lt;p&gt;スレッド3番: for(i = 75; i &amp;lt; 100; i++) a[i]=0;&lt;/p&gt;

&lt;h3 id=&#34;ファイルコピーの例:a0a57c1b6e12579fe764acb009917377&#34;&gt;ファイルコピーの例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/uio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#define BUF_SIZE 4096*1024
char buf1[BUF_SIZE];
char buf2[BUF_SIZE];

int main(int argc,char *argv[])
{
    int file_stc,file_dst;
    int size1, size2;
    if( argc != 3){
        printf(&amp;quot;usage: filecopy source-file dest-file\n&amp;quot;)
        return 1;
    }
    file_src=open(argv[1],O_RDONLY); 
    file_dst=open(argv[2],O_WRONLY|O_CREAT|O_TRUNC,S_IREAD|S_IWRITE);
    if( file_src==-1 || file_dst==-1 ){
        printf(&amp;quot;file read/write error\n&amp;quot;);
        return 1;
    }
    size1=read(file_src,buf1,BUF_SIZE);

    #pragma omp parallel sections num_threads(2)
    {
        #pragma omp section
        while(1){
            size2=read(file_src,buf2,BUF_SIZE);

            #pragma omp barrier
            if( size2 &amp;lt;= 0 ) 
                break;
            size1=read(file_src,buf1,BUF_SIZE);

            #pragma omp barrier
            if( size1&amp;lt;=0 ) 
                break;
        }
        #pragma omp section
        while(1){
            write(file_dst,buf1,size1);

            #pragma omp barrier
            if( size2&amp;lt;=0 ) 
                break;
            write(file_dst,buf2,size2);

            #pragma omp barrier
            if( size1&amp;lt;=0 ) break;
        } 
    }
    close(file_src);
    close(file_dst);
    return 0;
}                                                        
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考:a0a57c1b6e12579fe764acb009917377&#34;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/OpenMP&#34;&gt;OpenMP - Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.google.co.jp/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=6&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0CD8QFjAFahUKEwj1tLi-1_PIAhUFmJQKHSa_CaA&amp;amp;url=http%3A%2F%2Fwww.cc.u-tokyo.ac.jp%2Fsupport%2Fkosyu%2F03%2Fkosyu-openmp_c.pdf&amp;amp;usg=AFQjCNEJGbKtYlh39Etv42TzJpjyI8jDIQ&amp;amp;sig2=lAaDfPR0eogJo1v_3EuR8A&#34;&gt;C 言語による OpenMP 入門 - 東京大学&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Githubのコミット名とブランチ名を適当に考えてみる</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-30-02/</link>
      <pubDate>Fri, 30 Oct 2015 20:04:07 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-30-02/</guid>
      <description>

&lt;p&gt;英語の場合のコミット名ブランチ名を適当に考えます。&lt;/p&gt;

&lt;h1 id=&#34;コミットに求められること:22a8f9a59cbc32861b4c14b3e79e9c37&#34;&gt;コミットに求められること&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;レビューするプロセスをスピードアップ&lt;/li&gt;
&lt;li&gt;良いリリースノートを書く手助け&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;基本:22a8f9a59cbc32861b4c14b3e79e9c37&#34;&gt;基本&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;大文字で始める&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;動詞で始める&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ピリオドを付けない&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;動詞は過去形,現在系&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;過去形と現在系は両方を見ますがGoogle, Microsoftなどのコミット名を見ると過去形で始めているものは少なかったり、他のサイトと比較をしても現在系を進めている(誰かに命令しているように書く方が論理的という考え方の)サイトが多いのが現状です。ですが基本的にはそのディレクトリの方式に合わせるのが一番です。&lt;/p&gt;

&lt;h3 id=&#34;よく使う動詞:22a8f9a59cbc32861b4c14b3e79e9c37&#34;&gt;よく使う動詞&lt;/h3&gt;

&lt;p&gt;新規追加 add 改善 improve, improved&lt;/p&gt;

&lt;p&gt;変更 change, changed&lt;/p&gt;

&lt;p&gt;修正 modify, modified&lt;/p&gt;

&lt;p&gt;バグフィックス fix, fixed&lt;/p&gt;

&lt;p&gt;削除 remove, removed&lt;/p&gt;

&lt;p&gt;取り消し revert, reverted&lt;/p&gt;

&lt;p&gt;更新 update, updated&lt;/p&gt;

&lt;p&gt;拡張 upgrade, upgraded&lt;/p&gt;

&lt;p&gt;有効 enable, enabled&lt;/p&gt;

&lt;p&gt;無効 disable, disabled&lt;/p&gt;

&lt;p&gt;拡張 extend, extended&lt;/p&gt;

&lt;p&gt;強化、向上 enhance, enhanced&lt;/p&gt;

&lt;p&gt;実装 implement, implemented&lt;/p&gt;

&lt;p&gt;リファクタ refactor, refactored&lt;/p&gt;

&lt;p&gt;最適化 optimize, optimized&lt;/p&gt;

&lt;p&gt;削減、切り詰め reduce, reduced&lt;/p&gt;

&lt;h1 id=&#34;ブランチに求められるもの:22a8f9a59cbc32861b4c14b3e79e9c37&#34;&gt;ブランチに求められるもの&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;中央ブランチを決めそれを中心としてブランチを作成する&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;バグ編集等をしたいときにその時点の情報を保守したまま並行して編集をする&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;分岐したブランチは他のブランチの影響を受けないため、同じリポジトリ中で複数の変更を同時に進めていく&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;基本-1:22a8f9a59cbc32861b4c14b3e79e9c37&#34;&gt;基本&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;master,original(中央レポジトリ)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;リリース版が何時でも作成可能な状態。また、トピックブランチの分岐元としても使用します。そのため、安定した状態を保っておくことが重要。何らかの変更を行う場合は、トピックブランチを作成して作業を行うことが多い。Jenkins等のCIツールを使用した自動ビルドやテストはこのブランチを使って行う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;develop(中央レポジトリ)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;開発用。masterから分岐し、release-とmasterへマージする。&lt;/p&gt;

&lt;p&gt;先のリリースに向けた普段の開発で使用するブランチ。バグが存在する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;feature&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;新機能の開発用。バグ修正を行う際にdevelopから分岐し、developへマージする。&lt;/p&gt;

&lt;p&gt;フィーチャーブランチでの作業は基本的に共有する必要がないので、リモートでは管理しません。開発が完了したら、developブランチにマージを行うことで公開します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;release-&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次回リリースの準備用。developから分岐し、developとmasterへマージする。&lt;/p&gt;

&lt;p&gt;リリースブランチ上で行った修正を取り込むため、developブランチに対してもマージを行います。リリースへ向けて最終調整が行われます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hotfix-&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;masterのバグフィックス用。masterから分岐し、developとmasterへマージする。&lt;/p&gt;

&lt;p&gt;何か緊急のバグが発生し早急に治す必要がある場合これを使い、通常のdevelopと分けます。&lt;/p&gt;

&lt;h2 id=&#34;引用元:22a8f9a59cbc32861b4c14b3e79e9c37&#34;&gt;引用元&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/hayajo/3938098&#34;&gt;ChangeLog を支える英語&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.backlog.jp/git-guide/stepup/stepup1_2.html&#34;&gt;サルでもわかるGit入門&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C#でSplashWindow(Screen)を表示させる</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-28/</link>
      <pubDate>Wed, 28 Oct 2015 19:39:58 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-28/</guid>
      <description>

&lt;p&gt;スプラッシュ(スプラッシュスクリーン)を特定処理が終わったら自動的に閉じて切り替えたりする。&lt;/p&gt;

&lt;h2 id=&#34;スプラッシュ-スプラッシュスクリーン-とは:b29053ff5e3dc3ee8ed7aab801e3a548&#34;&gt;スプラッシュ(スプラッシュスクリーン)とは&lt;/h2&gt;

&lt;p&gt;スプラッシュ(スプラッシュスクリーン)は起動時に処理のかかるアプリケーションを起動させる場合、ユーザーの不安を無くすために読み込んでます感を出すために表示されることが多い。基本的に画面全体を覆う大きさではなく、中央に表示される。VisualStudio, OfficeなどMSのアプリには大抵あります。&lt;/p&gt;

&lt;p&gt;WPFにはスプラッシュスクリーンという機能がありますが、素早く表示され初期化が終わった時点で自動的に消えます。これは表示タイミングと表示を消すタイミングを作成側が指定することができません。そこでWindowを作成しそれをスプラッシュスクリーンとして扱いApp.xamlからそれを操作します。&lt;/p&gt;

&lt;h2 id=&#34;code:b29053ff5e3dc3ee8ed7aab801e3a548&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;App.xaml.cs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class App : Application
{       
    private SplashWindow _splash;
    public SplashWindow Splash { get; private set; }

    public App() : base()
    {
        Startup += Application_Startup;
    }

    private void Application_Startup(object sender, StartupEventArgs e){        
        Splash = new SplashWindow();
        Splash.Show();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MainWindow.xaml.cs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();

        Loaded += MainWindow_Loaded;
    }

    public void MainWindow_Loaded(object sender, RoutedEventArgs e)
    {
        var app = Application.Current as App;
        if (app == null || app.Splash == null) return;
        app.Splash.Close();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;App.xamlでSplashを表示させ、MainWindowがロードし終わった時点でSplashWindowを閉じます。ですがこの閉じる動作は確実に行われるわけではないので不安ならusing等を使うとうまくいくかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;ついで:b29053ff5e3dc3ee8ed7aab801e3a548&#34;&gt;ついで&lt;/h2&gt;

&lt;p&gt;スプラッシュスクリーンを任意のタイミングまで表示させたい場合は&lt;code&gt;System.Threading.Thread.Sleep&lt;/code&gt;を利用しスレッドを無理やり停止させます&lt;/p&gt;

&lt;p&gt;App.xaml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public partial class App : Application
{
    void App_Startup(object sender, StartupEventArgs e)
    {
        System.Threading.Thread.Sleep(3000);

        Main = new MainWindow();
        Main.Show();
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>C#でUpdateCheckをする</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-24/</link>
      <pubDate>Sat, 24 Oct 2015 21:07:25 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-24/</guid>
      <description>

&lt;p&gt;初めてまじめかもしれない記事&lt;/p&gt;

&lt;p&gt;OneceClickは便利だけどもどうせなら自分で(自動)アップデート機構を作りたいと思い適当に組みました  C#を使っています&lt;/p&gt;

&lt;p&gt;また例外に対し何もしていなかったり非同期ではなかったり初心者ソースになります&lt;/p&gt;

&lt;p&gt;Usingは適宜指定してください&lt;/p&gt;

&lt;h2 id=&#34;アップデートチェックだけ:511268231389866b3cfa797c488c371e&#34;&gt;アップデートチェックだけ&lt;/h2&gt;

&lt;p&gt;起動時にでも仕込ませて置けば十分だと思います。 このバージョンはとりあえず書いてあるファイルをそのまま読み込みその内容がProductVersionと違うかどうかを確認するだけです。&lt;/p&gt;

&lt;p&gt;この方式では通知をするだけです&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;string ver;

WebClient wc = new WebClient();

Stream st = wc.OpenRead(&amp;quot;調べるサイトURL&amp;quot;);

StreamReader sr = new StreamReader( st, Encoding.GetEncoding(51932));

ver = sr.ReadToEnd();

st.Close();

wc.Dispose();

if (ver != Application.ProductVersion)

{

    MessageBox.Show(&amp;quot;アップデートが∩(・＿・)∩あるでwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&amp;quot;);

}

else

{
    MessageBox.Show(&amp;quot;アップデートが(・＿・)ないwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&amp;quot;);
}    
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;アップデートチェックをしてその詳細情報を伝える:511268231389866b3cfa797c488c371e&#34;&gt;アップデートチェックをしてその詳細情報を伝える&lt;/h2&gt;

&lt;p&gt;こちらも起動時にでも仕込ませて置けば十分だと思います。 先ほどと違うのはアップデートチェックを行いその情報を取得,通知できるようにします。&lt;/p&gt;

&lt;p&gt;Xml解析を含んでいるのでアップデートチェックを行った後そのままファイルをダウンロードさせることが可能になります。ダウンロードURLが常に同じならこの方式をとる必要はありませんが、Githubにバージョン毎に公開していてそれを利用したい場合はこのようにするのがいいと思います。&lt;/p&gt;

&lt;p&gt;Xml解析の部分は特に初心者感が出てると思いますがご了承ください&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Version = Version情報&lt;/li&gt;
&lt;li&gt;Date = 更新日時&lt;/li&gt;
&lt;li&gt;Url = ダウンロードURL   としています&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;WebClient wc = new WebClient();

byte[] pagedata = wc.DownloadData(&amp;quot;調べるサイトURL&amp;quot;);

Encoding ec = Encoding.UTF8;

//Console.WriteLine(ec.GetString(pagedata));

XmlDocument xdoc = new XmlDocument();

xdoc.LoadXml(ec.GetString(pagedata));

XmlElement root = xdoc.DocumentElement;

XmlNodeList wc = root.SelectNodes(&amp;quot;Updata&amp;quot;);

var version = root.SelectSingleNode(&amp;quot;Version&amp;quot;).InnerText;
var date = root.SelectSingleNode(&amp;quot;Date&amp;quot;).InnerText;
var url = root.SelectSingleNode(&amp;quot;URL&amp;quot;).InnerText;

wc.Dispose();

if (version != Application.ProductVersion)

{

    MessageBox.Show(&amp;quot;アップデートが∩(・＿・)∩あるでwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&amp;quot;);
    Console.WriteLine(&amp;quot;Version:{0} 更新日時:{1} ダウンロードURL:{2}&amp;quot;, version, date, url);
    //ダウンロード, 解凍させ上書きする機構
}

else

{
    MessageBox.Show(&amp;quot;アップデートが(・＿・)ないwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&amp;quot;);
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;今回解析したXmlの配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Updata&amp;gt;
    &amp;lt;Version&amp;gt;1.0.0&amp;lt;/Version&amp;gt;
    &amp;lt;Date&amp;gt;2015/0/0&amp;lt;/Date&amp;gt;
    &amp;lt;URL&amp;gt;URL&amp;lt;/URL&amp;gt;
&amp;lt;/Updata&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>HugoのShortCodeでTwitterTweetの埋め込みをする</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-17/</link>
      <pubDate>Sat, 17 Oct 2015 16:12:53 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-17/</guid>
      <description>

&lt;p&gt;このシリーズ無駄に3つ目 shortcode使うより埋め込むを利用した方が速い気がします&lt;/p&gt;

&lt;p&gt;今回はTwitterのTweetを埋め込みます&lt;/p&gt;

&lt;h2 id=&#34;デモ:ab327018fe4ea958a7b31d6c47785a29&#34;&gt;デモ&lt;/h2&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;ja&#34;&gt;&lt;a href=&#34;https://twitter.com/jack/status/20&#34;&gt;&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&#34;使用方法:ab327018fe4ea958a7b31d6c47785a29&#34;&gt;使用方法&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;{.{&amp;lt; twittertweet name=&amp;quot;twitter id,name&amp;quot; id=&amp;quot;tweet id&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ShortCode対策でピリオドを入れています&lt;/p&gt;

&lt;h2 id=&#34;ソース:ab327018fe4ea958a7b31d6c47785a29&#34;&gt;ソース&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;blockquote class=&amp;quot;twitter-tweet&amp;quot; lang=&amp;quot;ja&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;https://twitter.com/{{ .Get &amp;quot;name&amp;quot; }}/status/{{ .Get &amp;quot;id&amp;quot; }}&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;script async src=&amp;quot;//platform.twitter.com/widgets.js&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>HugoのShortCodeでYoutubePlayerの埋め込みをする</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-16/</link>
      <pubDate>Fri, 16 Oct 2015 18:09:22 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-16/</guid>
      <description>

&lt;h2 id=&#34;デモ:d0abd677cd519e0eba22ff99135df0aa&#34;&gt;デモ&lt;/h2&gt;

&lt;p&gt;&lt;iframe class=&#34;youtubeplayer&#34; type=&#34;text/html&#34; width=&#34;500&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/SQfmvtO-U18&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;それだけです&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugoのshortcodesでnicovideoの埋め込みを簡単にする</title>
      <link>http://ebxpj6bp.github.io/post/2015-10-15/</link>
      <pubDate>Thu, 15 Oct 2015 19:15:34 +0900</pubDate>
      
      <guid>http://ebxpj6bp.github.io/post/2015-10-15/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://qiita.com/kounoike/items/cdbfaa2dab9bd3393a84&#34;&gt;Hugoのshortcodesでnicovideoの埋め込みを簡単にする&lt;/a&gt; Qiitaで面白い記事を見つけたので早速使ってみました Hugoの&lt;a href=&#34;https://gohugo.io/extras/shortcodes/&#34;&gt;shortcodes&lt;/a&gt;機能を利用して埋め込みを簡単にするようです&lt;/p&gt;

&lt;h2 id=&#34;デモ:35cdcb305d5f6a36204b574250e16183&#34;&gt;デモ&lt;/h2&gt;

&lt;p&gt;&lt;iframe class=&#34;nicovideo&#34; type=&#34;text/html&#34; width=&#34;312&#34; height=&#34;200&#34; src=&#34;http://ext.nicovideo.jp/thumb/sm9&#34; scrolling=&#34;no&#34; style=&#34;border:solid 1px #CCC;&#34; frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;



&lt;script class=&#34;nicovideoplayer&#34; type=&#34;text/javascript&#34; src=&#34;http://ext.nicovideo.jp/thumb_watch/sm9?w=500&amp;amp;h=315&#34;&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;a href=&#34;http://www.nicovideo.jp/watch/sm9&#34;&gt;新・豪血寺一族 -煩悩解放 - レッツゴー！陰陽師&lt;/a&gt;&lt;/noscript&gt;&lt;/p&gt;

&lt;p&gt;詳しい説明は &lt;strong&gt;&lt;a href=&#34;http://qiita.com/kounoike/items/cdbfaa2dab9bd3393a84&#34;&gt;Hugoのshortcodesでnicovideoの埋め込みを簡単にする&lt;/a&gt;&lt;/strong&gt; をご覧ください&lt;/p&gt;

&lt;h2 id=&#34;link:35cdcb305d5f6a36204b574250e16183&#34;&gt;Link&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://qiita.com/kounoike/items/cdbfaa2dab9bd3393a84&#34;&gt;Hugoのshortcodesでnicovideoの埋め込みを簡単にする&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/extras/shortcodes/&#34;&gt;Shortcodes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>